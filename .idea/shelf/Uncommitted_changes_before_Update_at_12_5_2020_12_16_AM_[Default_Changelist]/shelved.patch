Index: app/src/main/java/com/phoenix/music_application/PlayListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.phoenix.music_application;\r\n\r\nimport android.content.Intent;\r\nimport android.database.Cursor;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\n\r\npublic class PlayListActivity extends AppCompatActivity {\r\n\r\n    ListView listView;\r\n    String[] songNames;\r\n    File file;\r\n    ArrayList<String> artistNames = new ArrayList<String>(), albumNames = new ArrayList<String>();\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.Q)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_play_list);\r\n\r\n        listView = findViewById(R.id.playListView);\r\n\r\n        //folderpath is static variable inside settings screen activity, which gives path of folder selected to serach for songs\r\n        if (settingsActivity.folderPath == null) {\r\n            file = new File(Environment.getExternalStorageDirectory().getAbsolutePath());           //generates new file object with /mnt as root directory\r\n        } else {\r\n            file = new File(settingsActivity.folderPath);\r\n        }\r\n        final ArrayList<Audio> songs = scanDeviceForMp3Files();\r\n\r\n        for (int i = 0; i < songs.size(); i++) { Log.i(\"null\" ,songs.get(i).getTitle()); }\r\n\r\n        final ArrayList<ArrayList<Audio>> artistSongs = scanDeviceForArtistMp3Files();\r\n        //final ArrayList<ArrayList<Audio>> albumSongs = scanDeviceForAlbumMp3Files();\r\n\r\n//        for (int i = 0; i < artistSongs.size(); i++) {\r\n//            for (int j = 0; j < artistSongs.get(i).size(); j++)\r\n//                Log.i(artistNames.get(i) ,artistSongs.get(i).get(j).getTitle());\r\n//        }\r\n\r\n        songNames = new String[songs.size()];\r\n\r\n        for (int i = 0; i < songs.size(); i++) {\r\n            songNames[i] = songs.get(i).getTitle();             //did this so that song doesnt show .mp3 in its name\r\n        }\r\n\r\n        //arrayadapter to\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(getApplicationContext(), R.layout.songs_layout, R.id.songNameText, songNames);\r\n        listView.setAdapter(adapter);\r\n\r\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n//\r\n                Intent i = new Intent(PlayListActivity.this, MainActivity.class);\r\n                Bundle b = new Bundle();\r\n\r\n                i.putExtra(\"songIndex\", position);\r\n                b.putSerializable(\"songList\", (ArrayList<Audio>) songs);\r\n                i.putExtras(b);\r\n                startActivity(i);\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private ArrayList<ArrayList<Audio>> scanDeviceForAlbumMp3Files() {\r\n\r\n        int i;\r\n        ArrayList<ArrayList<Audio>> tempAlbumList = new ArrayList<ArrayList<Audio>>();\r\n\r\n        String selection = MediaStore.Audio.Media.IS_MUSIC + \" != 0\";\r\n        String[] projection = {\r\n                MediaStore.Audio.Media.TITLE,\r\n                MediaStore.Audio.Media.ARTIST,\r\n                MediaStore.Audio.Media.DATA,\r\n                MediaStore.Audio.Media.DURATION,\r\n                MediaStore.Audio.Media.ALBUM,\r\n\r\n        };\r\n        final String sortOrder = MediaStore.Audio.AudioColumns.ALBUM + \" COLLATE LOCALIZED ASC\";\r\n\r\n        Uri uri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n        Cursor cursor = getContentResolver().query(uri, projection, selection, null, sortOrder);\r\n\r\n        if (cursor != null) {\r\n            cursor.moveToFirst();\r\n\r\n            i = -1;\r\n\r\n            while (!cursor.isAfterLast()) {\r\n                Audio a = new Audio();\r\n\r\n                String t = cursor.getString(0);\r\n                String ar = cursor.getString(1);\r\n                String p = cursor.getString(2);\r\n\r\n                a.setTitle(t);\r\n                a.setArtist(ar);\r\n                a.setPath(cursor.getString(2));\r\n                a.setDuration(cursor.getString(3));\r\n\r\n                if (!albumNames.contains(cursor.getString(4))) {\r\n                    albumNames.add(cursor.getString(4));\r\n                    i++;\r\n                }\r\n\r\n                if (p != null) { tempAlbumList.get(i).add(a); }\r\n\r\n                cursor.moveToNext();\r\n            }\r\n        }\r\n\r\n        return tempAlbumList;\r\n    }\r\n\r\n    private ArrayList<ArrayList<Audio>> scanDeviceForArtistMp3Files() {\r\n\r\n        int i;\r\n        ArrayList<ArrayList<Audio>> tempArtistList = new ArrayList<ArrayList<Audio>>();\r\n\r\n        String selection = MediaStore.Audio.Media.IS_MUSIC + \" != 0\";\r\n        String[] projection = {\r\n                MediaStore.Audio.Media.TITLE,\r\n                MediaStore.Audio.Media.ARTIST,\r\n                MediaStore.Audio.Media.DATA,\r\n                MediaStore.Audio.Media.DURATION,\r\n\r\n        };\r\n        final String sortOrder = MediaStore.Audio.AudioColumns.ARTIST + \" COLLATE LOCALIZED ASC\";\r\n\r\n        Uri uri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n        Cursor cursor = getContentResolver().query(uri, projection, selection, null, sortOrder);\r\n\r\n        if (cursor != null) {\r\n            cursor.moveToFirst();\r\n\r\n            i = -1;\r\n\r\n            while (!cursor.isAfterLast()) {\r\n                Audio a = new Audio();\r\n\r\n                String t = cursor.getString(0);\r\n                String ar = cursor.getString(1);\r\n                String p = cursor.getString(2);\r\n\r\n                a.setTitle(t);\r\n                a.setArtist(ar);\r\n                a.setPath(cursor.getString(2));\r\n                a.setDuration(cursor.getString(3));\r\n\r\n                if (!artistNames.contains(ar)) {\r\n                    artistNames.add(ar);\r\n                    i++;\r\n                }\r\n\r\n                if (p != null) { tempArtistList.get(i).add(a); }\r\n\r\n                cursor.moveToNext();\r\n            }\r\n        }\r\n\r\n        return tempArtistList;\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.Q)\r\n    private ArrayList<Audio> scanDeviceForMp3Files() {\r\n\r\n        String selection = MediaStore.Audio.Media.IS_MUSIC + \" != 0\";\r\n        String[] projection = {\r\n                MediaStore.Audio.Media.TITLE,\r\n                MediaStore.Audio.Media.ARTIST,\r\n                MediaStore.Audio.Media.DATA,\r\n                MediaStore.Audio.Media.DURATION,\r\n\r\n        };\r\n        final String sortOrder = MediaStore.Audio.AudioColumns.TITLE + \" COLLATE LOCALIZED ASC\";\r\n        ArrayList<Audio> mp3Files = new ArrayList<>();\r\n\r\n        Uri uri;\r\n        Cursor cursor = null;\r\n        uri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n        try {\r\n            if (settingsActivity.folderPath == null) {\r\n\r\n                cursor = getContentResolver().query(uri, projection, selection, null, sortOrder);\r\n            } else {\r\n\r\n                Toast.makeText(this, settingsActivity.folderPath, Toast.LENGTH_LONG).show();\r\n                File base = new File(settingsActivity.folderPath);\r\n                String p = base.getName();\r\n                cursor = getContentResolver().query(uri, projection, MediaStore.Audio.Media.DATA + \" like ? \", new String[]{\"%\" + p + \"%\"}, sortOrder);\r\n            }\r\n\r\n\r\n            if (cursor != null) {\r\n                cursor.moveToFirst();\r\n//\r\n\r\n                while (!cursor.isAfterLast()) {\r\n                    Audio a = new Audio();\r\n                    String t = cursor.getString(0);\r\n                    String ar = cursor.getString(1);\r\n                    String p = cursor.getString(2);\r\n                    a.setTitle(t);\r\n                    a.setArtist(ar);\r\n\r\n                    a.setPath(cursor.getString(2));\r\n\r\n                    a.setDuration(cursor.getString(3));\r\n\r\n                    //if (!artistNames.contains(cursor.getString(1))) { artistNames.add(ar); }\r\n\r\n                    if (p != null) {\r\n                        mp3Files.add(a);\r\n\r\n                    }\r\n                    cursor.moveToNext();\r\n                }\r\n\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            Log.e(\"TAG\", e.toString());\r\n        } finally {\r\n            if (cursor != null) {\r\n                cursor.close();\r\n            }\r\n        }\r\n        if (settingsActivity.folderPath == null)\r\n            PreferencesConfig.writeInPref(this, mp3Files);\r\n        return mp3Files;\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/phoenix/music_application/PlayListActivity.java	(revision ae3a98d5b8eab9872b113e7b4dcd48a0ec3ea7e3)
+++ app/src/main/java/com/phoenix/music_application/PlayListActivity.java	(date 1607103849397)
@@ -45,7 +45,7 @@
 
         for (int i = 0; i < songs.size(); i++) { Log.i("null" ,songs.get(i).getTitle()); }
 
-        final ArrayList<ArrayList<Audio>> artistSongs = scanDeviceForArtistMp3Files();
+        //final ArrayList<ArrayList<Audio>> artistSongs = scanDeviceForArtistMp3Files();
         //final ArrayList<ArrayList<Audio>> albumSongs = scanDeviceForAlbumMp3Files();
 
 //        for (int i = 0; i < artistSongs.size(); i++) {
Index: app/src/main/java/com/phoenix/music_application/libActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.phoenix.music_application;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\n\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\n\r\n\r\npublic class libActivity extends Activity {\r\n\r\n    ConstraintLayout openAllsongs;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.library_screen);\r\n        openAllsongs= findViewById(R.id.openAllsongs);\r\n\r\n    }\r\n\r\n    public void openAllsongs(View v){\r\n\r\n        Intent intent = new Intent(libActivity.this, Recycler_view.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/phoenix/music_application/libActivity.java	(revision ae3a98d5b8eab9872b113e7b4dcd48a0ec3ea7e3)
+++ app/src/main/java/com/phoenix/music_application/libActivity.java	(date 1607107307280)
@@ -22,7 +22,8 @@
 
     public void openAllsongs(View v){
 
-        Intent intent = new Intent(libActivity.this, Recycler_view.class);
+        //Intent intent = new Intent(libActivity.this, Recycler_view.class);
+        Intent intent = new Intent(libActivity.this, PlayListActivity.class);
         startActivity(intent);
     }
 
