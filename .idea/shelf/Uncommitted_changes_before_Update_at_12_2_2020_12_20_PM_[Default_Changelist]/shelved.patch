Index: app/src/main/java/com/phoenix/music_application/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.phoenix.music_application;\r\n\r\nimport android.Manifest;\r\nimport android.animation.ObjectAnimator;\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.preference.PreferenceManager;\r\nimport android.text.method.ScrollingMovementMethod;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.view.animation.LinearInterpolator;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.SeekBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.chibde.visualizer.LineVisualizer;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport pub.devrel.easypermissions.AfterPermissionGranted;\r\nimport pub.devrel.easypermissions.AppSettingsDialog;\r\nimport pub.devrel.easypermissions.EasyPermissions;\r\n\r\nimport static com.phoenix.music_application.MediaPlayerService.isMediaPlayernull;\r\n\r\npublic class MainActivity extends AppCompatActivity implements EasyPermissions.PermissionCallbacks {\r\n    Button playBtton;\r\n    Button skipToNextBtn;\r\n    public SeekBar start;\r\n    public TextView startText;\r\n    public TextView endText;\r\n    public TextView songNameTextView;\r\n    public TextView artistNameTextView;\r\n    Button lyricsIcon;\r\n    Button settingsIcon;\r\n    CardView cardView;\r\n    ImageView vinylArt;\r\n    private Button libraryButton;\r\n    Animation animation;\r\n    ArrayList<Audio> songsList;\r\n    int SongTotalTime = 0;\r\n    Uri uri;\r\n    public String songName, artistName = null;\r\n    static int pos;\r\n    boolean isLyricsVisible = false;\r\n    int time = 0;\r\n    SharedPreferences sharedPreferences;\r\n    Animation fade_out, fade_in;\r\n    ImageView albumArt;\r\n    LineVisualizer lineVisualizer;\r\n    ObjectAnimator rotateCard;\r\n\r\n    //for lyrics\r\n    DownloadLyrics downloadLyrics;\r\n    public static TextView lyricsView;\r\n    static ProgressBar progressBar;\r\n    @SuppressLint(\"StaticFieldLeak\")\r\n    String fullURL;\r\n\r\n    String apiKey = \"&apikey=d56948ee4bc42159f087b0f2a1c07ae6\";\r\n    String baseURL = \"https://api.musixmatch.com/ws/1.1/matcher.lyrics.get\";\r\n\r\n    //public static final String Broadcast_PLAY_NEW_AUDIO = \"com.phoenix.music_application.PlayNewAudio\";\r\n\r\n\r\n    private final int DEFAULT_PERMISSIONS_REQ_CODE = 1;\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.Q)\r\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        //To hide status bar\r\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        getPermissions();\r\n\r\n        //Id implementation\r\n        songNameTextView = findViewById(R.id.songTitle);\r\n        albumArt = findViewById(R.id.albumArt_image);\r\n        progressBar = (ProgressBar) findViewById(R.id.progress_bar);\r\n        lyricsView = (TextView) findViewById(R.id.lyricsView);\r\n        artistNameTextView = findViewById(R.id.artistName);\r\n        lyricsIcon = findViewById(R.id.lyricsButton);\r\n        playBtton = findViewById(R.id.playPauseButton);\r\n        settingsIcon= findViewById(R.id.settingsButton);\r\n        skipToNextBtn = findViewById(R.id.nextButton);\r\n        startText = findViewById(R.id.runningTime);\r\n        endText = findViewById(R.id.totalTime);\r\n        cardView = findViewById(R.id.albumArt_cardView);\r\n        animation = AnimationUtils.loadAnimation(this, R.anim.rotation);\r\n        fade_in = AnimationUtils.loadAnimation(this, R.anim.fade_in);\r\n        fade_out = AnimationUtils.loadAnimation(this, R.anim.fade_out);\r\n        lineVisualizer = findViewById(R.id.lineViz);\r\n        vinylArt = findViewById(R.id.albumArt_vinylArt);\r\n        start = findViewById(R.id.seeker);\r\n\r\n        //switch from main to lib--\r\n        libraryButton= (Button) findViewById(R.id.libraryButton);\r\n        libraryButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                openlibActivity();\r\n            }\r\n        });\r\n\r\n        //rotate animation for album art\r\n        rotateCard = ObjectAnimator.ofFloat(cardView, \"rotation\", 0, 360);\r\n        rotateCard.setInterpolator(new LinearInterpolator());\r\n        rotateCard.setDuration(2500);\r\n        rotateCard.setRepeatCount(ObjectAnimator.INFINITE);\r\n        rotateCard.setRepeatMode(ObjectAnimator.RESTART);\r\n\r\n        //line visualizer attributes\r\n        lineVisualizer.setStrokeWidth(2);\r\n        lineVisualizer.setColor(ContextCompat.getColor(this, R.color.design_default_color_secondary));\r\n\r\n        Intent i = getIntent();\r\n\r\n        try {\r\n            songsList = PreferencesConfig.readFromPref(this);\r\n\r\n\r\n            int p = LoadInt(getApplicationContext(), \"position\");\r\n            pos = i.getIntExtra(\"songIndex\", p);\r\n            SaveInt(getApplicationContext(), \"position\", pos);\r\n            String songPath = songsList.get(pos).getPath();\r\n\r\n            uri = Uri.parse(songPath);\r\n            Intent intent = new Intent(MainActivity.this, MediaPlayerService.class);\r\n            intent.putExtra(\"song\", songsList.get(pos).getPath());\r\n            String title = songsList.get(pos).getTitle();\r\n\r\n            String artist = songsList.get(pos).getArtist();\r\n\r\n            String duration = songsList.get(pos).getDuration();\r\n            startService(intent);\r\n\r\n            //set icon to pause\r\n            playBtton.setBackgroundResource(R.drawable.pausebutton_icon);\r\n\r\n            //initialize visualizer and albumArt animation\r\n            cardView.setRadius(1000);\r\n            vinylArt.setVisibility(View.VISIBLE);\r\n\r\n            rotateCard.start();\r\n\r\n            songNameTextView.setText(title);\r\n            songName = title;\r\n            artistName = artist;\r\n\r\n            artistNameTextView.setText(artist);\r\n            SongTotalTime = Integer.parseInt(duration);\r\n            endText.setText(createTimeText(SongTotalTime));\r\n\r\n            lineVisualizer.setPlayer(MediaPlayerService.getAudioSession());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //Control Seek bar track line / play line\r\n        start = findViewById(R.id.seeker);\r\n        if (SongTotalTime != 0) {\r\n            start.setMax(SongTotalTime);\r\n        }\r\n        start.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\r\n            @Override\r\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n                if (fromUser) {\r\n\r\n                    start.setProgress(progress);\r\n                    MediaPlayerService.seekto(progress);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onStartTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onStopTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n        });\r\n\r\n        //Switching to settings\r\n        settingsIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(MainActivity.this, settingsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        //skip to next song button onclick method\r\n        skipToNextBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (pos < songsList.size()-1) {\r\n                    pos++;\r\n\r\n                } else pos = 0;\r\n                Intent intent = new Intent(MainActivity.this, MediaPlayerService.class);\r\n\r\n                intent.putExtra(\"song\", songsList.get(pos).getPath());\r\n                String title = songsList.get(pos).getTitle();\r\n\r\n                String artist = songsList.get(pos).getArtist();\r\n\r\n                String duration = songsList.get(pos).getDuration();\r\n                startService(intent);\r\n\r\n                songNameTextView.setText(title);\r\n                songName = title;\r\n                artistNameTextView.setText(artist);\r\n                SongTotalTime = Integer.parseInt(duration);\r\n                endText.setText(createTimeText(SongTotalTime));\r\n            }\r\n        });\r\n\r\n        //lyrics button onclick method\r\n        lyricsIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if (!isLyricsVisible) {\r\n                    try {\r\n                        String encodedString = URLEncoder.encode(songName, \"UTF-8\");\r\n                        String encodedArtistName = URLEncoder.encode(artistName, \"UTF-8\");\r\n                        Log.i(\"encoded\", songName);\r\n                        fullURL = baseURL + \"?q_track=\" + encodedString + \"&q_artist=\" + encodedArtistName + apiKey;\r\n                    } catch (UnsupportedEncodingException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    //the textview which is supposed to be displaying lyrics\r\n                    cardView.setAlpha((float) 0.3);\r\n                    lyricsView.setVisibility(View.VISIBLE);\r\n                    lyricsView.setMovementMethod(new ScrollingMovementMethod());\r\n                    isLyricsVisible = true;\r\n                    downloadLyrics = new DownloadLyrics(MainActivity.this);        //asynctask class\r\n                    downloadLyrics.execute(fullURL);\r\n\r\n                }\r\n                else if (isLyricsVisible) {\r\n                    cardView.setAlpha(1);\r\n                    lyricsView.setVisibility(View.INVISIBLE);\r\n                    isLyricsVisible = false;\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        //Up date song time line\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                while (isMediaPlayernull()) {\r\n                    try {\r\n                        Message message = new Message();\r\n\r\n                        message.what = time;\r\n\r\n                        handler.sendMessage(message);\r\n                        time += 1000;\r\n                        Thread.sleep(1000);\r\n                    } catch (InterruptedException ignored) {\r\n\r\n                    }\r\n                }\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    @SuppressLint(\"HandlerLeak\")\r\n    private Handler handler = new Handler() {\r\n        @SuppressLint(\"SetTextI18n\")\r\n        @Override\r\n        public void handleMessage(Message message) {\r\n            int SeekBarPosition = message.what;\r\n            //Update song seek bar\r\n            start.setProgress(SeekBarPosition);\r\n\r\n            //Update Labels\r\n            String Time = createTimeText(SeekBarPosition);\r\n            String totalTime = createTimeText(SongTotalTime);\r\n            startText.setText(Time);\r\n            endText.setText(totalTime);\r\n        }\r\n    };\r\n\r\n    //Time Shows\r\n    public String createTimeText(int time) {\r\n\r\n        int sec = time / 1000 % 60;\r\n\r\n        if(sec < 10) { return (time / 1000 / 60) + \":0\" + sec; }\r\n        else { return (time / 1000 / 60) + \":\" + sec; }\r\n    }\r\n\r\n    public void PlayButton(View view) {\r\n\r\n\r\n        if (!MediaPlayerService.isplaying) {\r\n\r\n            MediaPlayerService.play();\r\n\r\n            //change icon to pause\r\n            playBtton.startAnimation(fade_out);\r\n            playBtton.setBackgroundResource(R.drawable.pausebutton_icon);\r\n            playBtton.startAnimation(fade_in);\r\n\r\n            //initialize audio visualization\r\n            lineVisualizer.setPlayer(MediaPlayerService.getAudioSession());\r\n\r\n            //circular album art with centered vinyl graphic\r\n            cardView.setRadius(1000);\r\n            vinylArt.setVisibility(View.VISIBLE);\r\n\r\n            //start rotate animation\r\n            if(MediaPlayerService.getPosition() == 0) { rotateCard.start(); }\r\n            else { rotateCard.resume(); }\r\n        }\r\n        else {\r\n\r\n            MediaPlayerService.pause();\r\n\r\n            //change icon to play\r\n            playBtton.startAnimation(fade_out);\r\n            playBtton.setBackgroundResource(R.drawable.playbutton_icon);\r\n            playBtton.startAnimation(fade_in);\r\n\r\n            //pause rotate animation\r\n            rotateCard.pause();\r\n        }\r\n    }\r\n\r\n    //public void openPlayList(View view) { startActivity(new Intent(this, PlayListActivity.class)); }\r\n\r\n    public void SaveInt(Context context, String key, int value) {\r\n        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.putInt(key, value);\r\n        editor.apply();\r\n    }\r\n\r\n    public int LoadInt(Context context, String key) {\r\n        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        return sharedPreferences.getInt(key, 0);\r\n    }\r\n\r\n    //Getting permissions from user\r\n    //used EasyPermissions library, you can check it out here - https://codinginflow.com/tutorials/android/easypermissions\r\n    //It is simpler representation to request permissions, easier to understand\r\n    @AfterPermissionGranted(1)\r\n    private void getPermissions() {\r\n        String[] perms = {Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.RECORD_AUDIO};\r\n        if (EasyPermissions.hasPermissions(this, perms)) {\r\n            Toast.makeText(this, \"Permission granted\", Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            EasyPermissions.requestPermissions(this, \"We need permissions to read songs from storage\",\r\n                    DEFAULT_PERMISSIONS_REQ_CODE, perms);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionsGranted(int requestCode, @NonNull List<String> perms) {\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionsDenied(int requestCode, @NonNull List<String> perms) {\r\n        if (EasyPermissions.somePermissionPermanentlyDenied(this, perms)) {\r\n            new AppSettingsDialog.Builder(this).build().show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE) {\r\n            getPermissions();\r\n        }\r\n    }\r\n\r\n    public void openlibActivity(){\r\n        Intent intent = new Intent(this, libActivity.class);\r\n        startActivity(intent);\r\n    }\r\n}\r\n\r\n//LET THIS CODE BE HERE, I THINK WE WILL NEED IT LATER\r\n\r\n\r\n/*    //Binding this Client to the AudioPlayer Service\r\n    private ServiceConnection serviceConnection = new ServiceConnection() {\r\n        @Override\r\n        public void onServiceConnected(ComponentName name, IBinder service) {\r\n            // We've bound to LocalService, cast the IBinder and get LocalService instance\r\n            MediaPlayerService.LocalBinder binder = (MediaPlayerService.LocalBinder) service;\r\n            player = binder.getService();\r\n            serviceBound = true;\r\n\r\n            Toast.makeText(MainActivity.this, \"Service Bound\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n        @Override\r\n        public void onServiceDisconnected(ComponentName name) {\r\n            serviceBound = false;\r\n        }\r\n    };\r\n\r\n    private void playAudio(int audioIndex) {\r\n        //Check is service is active\r\n        if (!serviceBound) {\r\n            //Store Serializable audioList to SharedPreferences\r\n            StorageUtil storage = new StorageUtil(getApplicationContext());\r\n            storage.storeAudio(audioList);\r\n            storage.storeAudioIndex(audioIndex);\r\n\r\n            Intent playerIntent = new Intent(this, MediaPlayerService.class);\r\n            startService(playerIntent);\r\n            bindService(playerIntent, serviceConnection, Context.BIND_AUTO_CREATE);\r\n        } else {\r\n            //Store the new audioIndex to SharedPreferences\r\n            StorageUtil storage = new StorageUtil(getApplicationContext());\r\n            storage.storeAudioIndex(audioIndex);\r\n\r\n            //Service is active\r\n            //Send a broadcast to the service -> PLAY_NEW_AUDIO\r\n            Intent broadcastIntent = new Intent(Broadcast_PLAY_NEW_AUDIO);\r\n            sendBroadcast(broadcastIntent);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSaveInstanceState(Bundle savedInstanceState) {\r\n        savedInstanceState.putBoolean(\"ServiceState\", serviceBound);\r\n        super.onSaveInstanceState(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public void onRestoreInstanceState(Bundle savedInstanceState) {\r\n        super.onRestoreInstanceState(savedInstanceState);\r\n        serviceBound = savedInstanceState.getBoolean(\"ServiceState\");\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (serviceBound) {\r\n            unbindService(serviceConnection);\r\n            //service is active\r\n            player.stopSelf();\r\n        }\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.Q)\r\n    private void loadAudio() {\r\n        ContentResolver contentResolver = getContentResolver();\r\n\r\n        Uri uri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n        String selection = MediaStore.Audio.Media.IS_MUSIC + \"!= 0\";\r\n        final String sortOrder = MediaStore.Audio.AudioColumns.TITLE + \" COLLATE LOCALIZED ASC\";\r\n//        String sortOrder = MediaStore.Audio.Media.TITLE + \" ASC\";\r\n        Cursor cursor = contentResolver.query(uri, null, selection, null, sortOrder);\r\n\r\n        if (cursor != null && cursor.getCount() > 0) {\r\n            audioList = new ArrayList<>();\r\n            while (cursor.moveToNext()) {\r\n                String data = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));\r\n                String title = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.TITLE));\r\n                String album = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ALBUM));\r\n                String artist = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));\r\n\r\n                // Save to audioList\r\n                audioList.add(new Audio(data, title, album, artist));\r\n            }\r\n        }\r\n        assert cursor != null;\r\n        cursor.close();\r\n    }\r\n\r\n\r\n}*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/phoenix/music_application/MainActivity.java	(revision 1bad4178fcdc08bfa229314d65cb642da1cb2066)
+++ app/src/main/java/com/phoenix/music_application/MainActivity.java	(date 1606540310633)
@@ -3,6 +3,8 @@
 import android.Manifest;
 import android.animation.ObjectAnimator;
 import android.annotation.SuppressLint;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -31,6 +33,8 @@
 import androidx.annotation.RequiresApi;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.cardview.widget.CardView;
+import androidx.core.app.NotificationCompat;
+import androidx.core.app.NotificationManagerCompat;
 import androidx.core.content.ContextCompat;
 
 import com.chibde.visualizer.LineVisualizer;
@@ -298,6 +302,7 @@
             }
         }).start();
 
+
     }
 
     @SuppressLint("HandlerLeak")
